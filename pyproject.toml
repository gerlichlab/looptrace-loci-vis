[tool.poetry]
name = "looptrace-loci-vis"
version = "0.3.4"
description = "This project facilitates viewing, in `napari`, locus-specific spots from `looptrace`."
authors = ["Vince Reuter"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/gerlichlab/looptrace-loci-vis.git"
keywords = ["visualisation", "bioinformatics", "chromatin", "napari", "FISH"]
classifiers = [
  "Development Status :: 1 - Planning",
  "License :: OSI Approved :: MIT License",
  "Operating System :: POSIX :: Linux",
  "Operating System :: MacOS",
  "Operating System :: Microsoft :: Windows",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Scientific/Engineering :: Bio-Informatics",
  "Typing :: Typed",
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.plugins."napari.manifest"]
looptrace-loci-vis = "looptrace_loci_vis:napari.yaml"

[tool.poetry.dependencies]
python = ">=3.10,<3.13"
expression = ">=5.0.2"
gertils = { git = "https://github.com/gerlichlab/gertils.git", tag = "v0.6.0" }
numpy = "*"
numpydoc_decorator = ">=2.2.1"
pandas = "*"
zarr = ">=2.4.12"

# OS-specific dependency declarations
napari = { version = "==0.4.19.post1", markers = "sys_platform == 'darwin'" }
pyqt6 = { version = ">=6.5.0", markers = "sys_platform == 'darwin'" }

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
pytest = "^7.2.0"

[tool.poetry.group.formatting]
optional = true

[tool.poetry.group.formatting.dependencies]
codespell = ">=2.2.4"
ruff = "==0.7.4"  # https://github.com/astral-sh/ruff/issues/14681

[tool.poetry.group.linting]
optional = true

[tool.poetry.group.linting.dependencies]
mypy = ">=1.0.1"
pandas-stubs = "*"
ruff = "==0.7.4"  # https://github.com/astral-sh/ruff/issues/14681

[tool.poetry.group.testsuite.dependencies]
npe2 = "*"
pytest = ">=7.1.0"
pytest-cov = ">=5.0.0"
typer = "*"

[tool.codespell]
skip = ".git,.mypy_cache,.nox,.vscode,__pycache__,pyproject.toml,poetry.lock"
builtin = "clear,rare,informal,usage,code,names"
ignore-words-list = "jupyter,iff"  # prevent jupyter -> jupiter, iff -> if
check-filenames = true
uri-ignore-words-list = "*" # prevent spelling correction in URL-like values.

[tool.mypy]
files = ['looptrace_loci_vis/*.py', 'tests/*.py']
plugins = ["pydantic.mypy"]
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true
enable_error_code = ["ignore-without-code"]

[[tool.mypy.overrides]]
module = "looptrace_loci_vis.*"
disallow_untyped_defs = true
disallow_untyped_calls = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_any_unimported = true
disallow_any_explicit = true
disallow_any_generics = true
disallow_subclassing_any = true
implicit_optional = false
strict_optional = true

[tool.ruff]
# Black uses line-length = 88, but allows exceptions when breaking the line
# would lead to other rule violations. Use 100 as a maximum hard limit:
line-length = 100
target-version = "py310"

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = [
    "INP001", # part of an implicit namespace package
    "D103", # Missing docstring in public function
    "ANN201", # Missing return type annotation for public function
]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    # Missing members
    "ANN10",  # Deprecated: Missing type annotation for self/cls in (class)method
    "D105",  # Missing docstring in magic method
    "ANN204", # Missing return type annotation for special method

    # Opinionated syntax
    "D203", # Ignore this to instead opt for class body or docstring to possibly start right away under class.
    "D213", # Ignore this to instead opt for summary part of docstring to be on first physical line.
    "D401", # First line of docstring should be in imperative mood
    "TRY003", # Avoid specifying long messages outside the exception class
    "C408",  # Unnecessary `dict` call (rewrite as a literal)
    "EM",  # Exception must not use a (f-)string literal, assign to variable first
    "FIX002",  # Line contains TODO, consider resolving the issue
    "D400",  # First line should end with a period
    "D415",  # First line should end with a period, question mark, or exclamation point
    "N818",  # Exception should be named with an Error suffix

    # Imports and type annotations
    "FA100",  # Missing `from __future__ import annotations`, but uses `typing.*`
    "TCH002",  # Move third-party import `...` into a type-checking block
    "TCH003",  # Move standard library import `...` into a type-checking block
    "UP007",  # Use `X | Y` for type annotations

    # Ruff recommends avoiding these checks when using `ruff format`. Since
    # `ruff format` is a drop-in replacement for `black`, we avoid the same
    # checks here (https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    # has more details):
    "W191",  # tab-indentation
    "E111",  # indentation-with-invalid-multiple
    "E114",  # indentation-with-invalid-multiple-comment
    "E117",  # over-indented
    "D206",  # indent-with-spaces
    "D300",  # triple-single-quotes
    "Q000",  # bad-quotes-inline-string
    "Q001",  # bad-quotes-multiline-string
    "Q002",  # bad-quotes-docstring
    "Q003",  # avoidable-escaped-quote
    "COM812",  # missing-trailing-comma
    "COM819",  # prohibited-trailing-comma
    "ISC001",  # single-line-implicit-string-concatenation
    "ISC002",  # multi-line-implicit-string-concatenation
    "E501",  # line-too-long
]

